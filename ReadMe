Objective: Create Buttons


******November 8, 2024***** APPLIED CARDLAYOUT
Nunez, Jan Daeve Louis P.

1. In IntroFrame Class, gi-setup nako siya as the main introductory main screen.
Nya I applied the CardLayout na karon sa IntroFrame para dali ra to switch between
screens without needing to remove and add components manually (Just as we tried 
and did out of curiousness of Amlani's idea). Now, I can simply show different
panels in the same frame by calling cardLayout.show(); P.S. Wala nako na-sunod ang 
structure sa given nga CardLayoutDemo nga gi-hatag ni Sir Hoylar kay medj nag-libog 
ko sa part sa PanelMouseListener, medj unfamiliar pa nga structure for me. Instead 
ni-watch nalang ko another tutorial sa youtube pero mostly ga-base ra ko sa gi-hatag 
nga CardLayoutDemo ni Sir Hoylar.

- Why CardLayout? Using CardLayout allows us to switch between screens nga less ra
ang code nga magamit and without having to clear sa mga contents and repaint sa
content pane each time.
- Sa Panel Structure, ga-himo ko JPanel introPanel nga maoy mo-hold sa introductory 
components sa katong title, logo, ug sa playButton (which is makapa-proceed sa user 
to the next screen).
- Play Button Action, gi-update ang playButton ActionEvent nga once nga i-click sa user, 
mo-switch siya into playFrame panel using cardLayout.show(container, "Play Frame").


2. Gi-modify nako ang PlayFrame class nga ma-align siya with CardLayout. Instead of 
adding PlayFrame components directly sa IntroFrame (katong intro.getContentPane.removeAll() 
nya fill dayon ang components sa PlayFrame Class to IntroFrame Class' frame). Ang 
alternative nga ako gi-kuan is nag-himo ko createPlayPanel() in PlayFrame tas like mo-return 
siya ug JPanel. Sa ingon-ani nga way, pwede nako simply ma-add ang gi-return nga JPanel sa 
container nga naay card name nga "PlayFrame" para mas limpyo ang layout.

- Purpose sa createPlayPanel(), kani nga method kay mo-encapsulate sa Play screen's components 
sa isa ka panel, which dali ra ma-add ang IntroFrame.

---------SUMMARY OF CHANGES AS OF NOVEMBER 8, 2024---------
* CardLayout in IntroFrame: Makes it easy to switch between panels (IntroFrame and PlayFrame)
with a single command.
* Separate Play Panel Creation in PlayFrame: The createPlayPanel() method modularizes the Play 
screen, making IntroFrame cleaner and dali ra ma-maintain sa pag-kuan sa code.
* Play Button Action: Triggers CardLayout to display the PlayFrame panel without the need for 
removing and adding components manually.

- Ang na-boangan karon: Nag-tagbaw ug ka-boang nganu dili mawala ang outline around the text 
inside sa "ME!" button nga naa naman jud "playButton.setFocusable(false)", na-set naman jud 
into false. Nag-tagbaw ko pangita alternative way kay last time gi-explain and gipa-kita nako 
ni Amlani about sa functionality ana nga method is to get rid of the outline of the text inside 
the button, tas karon kay na-boang kung nganu dili mo-gana, nga naka-affect ba kaha kaya ang 
akong pag-change and revise sa structure sa code. Mao to nangita jud ko alternative, stackoverflow, 
w3schools, I even prompted ChatGPT tanan methods nga related ana. It took me 30 whole minutes to 
realize sa pag-stare nako sa code nga playButton.setFocusable(false), "PLAYBUTTON" juicecolored 
sa playButton man diay tas ang sa "ME!" kay sa PlayFrame man diay to nga button which is 
questionButton. Sig tinanga gud HAAHAHAA.



******November 14, 2024***** ADDED NEW PANEL: WELCOMEUSER
Nunez, Jan Daeve Louis P.

1. AskUserName Class
- I added a JTextField swing component to the panel for requesting the user to input their name as per 
Amlani's idea and added a JButton "Enter" for the user to enter if the user is done inputting his/her name. 
I tried putting all components (JLabel, JTextField, and JButton) into another panel declared as askUserNamePanel 
at first and added the askUserNamePanel in the main panel of the class declared as userPanel. I had problems 
about the layout of the panel like the border of each components because it's always sticking to each other or 
it won't be vertically aligned to each other like the JTextField is below JLabel and JButton is below JTextField. 
I tried many layout managers like BorderLayout, GridLayout, FlowLayout, and finally I tried GridBagLayout, I once
tried GridBagLayout already in PlayFrame Class' layout. And I remembered about using GridBagLayout (to vertically align 
the components without filling whole panel) after I was totally exhausted about how to resolve this matter. I 
referenced the layout of AskUserName Class to PlayFrame Class' layout. And as I was applying it, I encountered 
problems about the JTextField and the JButton getting stick together. I tried to setBorder of the JButton 
[enterButton.setBorder(new BorderFactory.createEmptyBorder(20, 0, 0, 0));] but it only resizes the buttons'
top insides part not like putting padding on the top. I tried in the JButton because I already know that if I'll 
apply it in the JTextField it'll only do the same. After getting minutes of headache as to how to resolve it, 
I had an idea about putting the JTextField in another panel declared as textFieldPanel and add it to askUserNamePanel
and apply [textFieldPanel.setBorder(new BorderFactory.createEmptyBorder(0, 0, 20, 0));] to the textFieldPanel so 
it'll have a padding-top and GLADLY it worked. And  after that when the user clicks "Enter" button, the 
ActionListener captures the event, collects the user input, and should proceed to the next frame and display's
user's userName in WelcomeUser Class. But the problem I encountered was the WelcomeUser class isn't able to 
access the updated userName from the AskUserName class. This is because the WelcomeUser class creates a new 
instance of AskUserName each time it is used. As a result, the userName variable in the newly created AskUserName 
instance is not the one that was updated with user input. Instead, it starts with its default value (which is null).
Therefore, the WelcomeUser class doesn’t get the correct userName value that was set when the user clicked the 
"Enter" button in the AskUserName panel. The solution to this problem is I added a getter method (getUserName()) 
to retrieve the value stored in userName. This method makes the userName variable accessible outside of the class, 
enabling other parts of the app to use the user's name if needed. And to share the same instance of AskUserName 
between the AskUserName and WelcomeUser classes. Instead of creating a new AskUserName object inside WelcomeUser,
we pass the existing instance of AskUserName to WelcomeUser. This way, the WelcomeUser class can access the updated
userName value that was set by the user in the AskUserName panel. By sharing the same instance, both classes refer
to the same userName variable, ensuring that the value is consistent and up-to-date when WelcomeUser Class triies to use it.

2. WelcomeUser Class
- I created a new Class declared as WelcomeUser, which has components like JLabel. It displays a message welcoming the 
user by name. It first checks if the userName is null or empty. If it is not, it constructs a personalized greeting message. 
If the user hasn't entered a name, it falls back to a default message ("Guest Player"). By passing the 
AskUserName instance to WelcomeUser, it is able to access the updated userName via the getUserName() method
and display it in the welcome message.

3. Comments in each and every line and every block of code in across all classes
I made sure to add detailed comments in every line and block of code to ensure that others, especially those who might be
struggling to understand the logic or the codes, maka easily follow along lang sila. Each comment explains what the code does, why it’s structured 
that way, and its purpose within the overall program. I included these comments to make the code more readable and accessible, 
so anyone looking at it, even those new to programming or unfamiliar with the project, can quickly grasp its functionality 
and reasoning behind certain decisions. This will help them not only understand the code but also make it easier to debug 
or modify in the future.

> I stopped at display a welcome message for the user for now because my brain is so fried already. We'll continue next 
time because we haven't been able to agreen on what ideas we'll follow onto what's gonnabe next in like what's in the 
WelcomeUser Class panel or something due to us being busy and all because of our Semi-Finals Examinations.

---------SUMMARY OF CHANGES AS OF NOVEMBER 14, 2024---------
1. AskUserName Class
* A JTextField was added for user input to enter their name, along with a "Enter" button.
* Initially, components were added to a separate panel (askUserNamePanel), but layout issues arose, such as components sticking together or not aligning correctly.
* After experimenting with various layout managers, GridBagLayout was used to align components vertically.
* Padding was added to the JTextField by placing it in another panel (textFieldPanel), which resolved alignment issues.
* An ActionListener captures user input when the "Enter" button is clicked and should pass the user's name to the next frame, WelcomeUser.
* The problem was that WelcomeUser created a new AskUserName instance each time, causing it to access the default (null) value of userName.
* The solution was to add a getUserName() method and pass the existing AskUserName instance to WelcomeUser to ensure the updated userName is correctly accessed and displayed.

2. WelcomeUser Class
* A new WelcomeUser class was created, which displays a personalized greeting using the user's name.
* If the userName is not provided, a default message ("Guest Player") is shown.
* By passing the existing AskUserName instance to WelcomeUser, the updated userName is accessed using the getUserName() method, ensuring the correct personalized message is displayed.


******December 21, 2024*****
